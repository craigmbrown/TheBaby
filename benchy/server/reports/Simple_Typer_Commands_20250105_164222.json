{
    "benchmark_name": "Simple Typer Commands",
    "purpose": "Evaluate the ability of a language model to convert natural language requests into Typer CLI commands.",
    "models": [
        {
            "model": "anthropic~claude-3-5-sonnet-latest",
            "results": [
                {
                    "prompt_response": {
                        "response": "python main.py ping-server",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 2271.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py ping-server",
                    "expected_result": "python main.py ping-server",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Ping the server quickly\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 1
                },
                {
                    "prompt_response": {
                        "response": "python main.py show-config --verbose",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 1585.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py show-config --verbose",
                    "expected_result": "python main.py show-config --verbose",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Show me the configuration details\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 2
                },
                {
                    "prompt_response": {
                        "response": "python main.py list-files /home/user --all",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 2816.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py list-files /home/user --all",
                    "expected_result": "python main.py list-files /home/user --all",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Please list files in /home/user including hidden ones\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 3
                },
                {
                    "prompt_response": {
                        "response": "python main.py create-user alice --role admin",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 3177.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py create-user alice --role admin",
                    "expected_result": "python main.py create-user alice --role admin",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Create a new user named alice with role admin\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 4
                },
                {
                    "prompt_response": {
                        "response": "python main.py delete-user user123 --confirm",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 2043.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py delete-user user123 --confirm",
                    "expected_result": "python main.py delete-user user123 --confirm",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Delete user with ID user123, skip confirmation\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 5
                },
                {
                    "prompt_response": {
                        "response": "python main.py generate-report sales sales_report.csv --output sales_report.csv",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 1845.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py generate-report sales sales_report.csv --output sales_report.csv",
                    "expected_result": "python main.py generate-report sales --output sales_report.csv",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Generate a sales report in the file sales_report.csv\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": false,
                    "index": 6
                }
            ],
            "correct_count": 5,
            "incorrect_count": 1,
            "accuracy": 0.8333333333333334,
            "average_tokens_per_second": 0.0,
            "average_total_duration_ms": 2289.5,
            "average_load_duration_ms": 0.0
        },
        {
            "model": "deepseek~deepseek-chat",
            "results": [
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py ping-server\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 2148.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py ping-server",
                    "expected_result": "python main.py ping-server",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Ping the server quickly\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 1
                },
                {
                    "prompt_response": {
                        "response": "python main.py show-config --verbose",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 1537.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py show-config --verbose",
                    "expected_result": "python main.py show-config --verbose",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Show me the configuration details\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 2
                },
                {
                    "prompt_response": {
                        "response": "```bash\npython main.py list-files /home/user --all\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 1548.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py list-files /home/user --all",
                    "expected_result": "python main.py list-files /home/user --all",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Please list files in /home/user including hidden ones\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 3
                },
                {
                    "prompt_response": {
                        "response": "```bash\npython main.py create-user alice --role admin\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 1692.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py create-user alice --role admin",
                    "expected_result": "python main.py create-user alice --role admin",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Create a new user named alice with role admin\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 4
                },
                {
                    "prompt_response": {
                        "response": "```bash\npython main.py delete-user user123 --confirm\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 1569.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py delete-user user123 --confirm",
                    "expected_result": "python main.py delete-user user123 --confirm",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Delete user with ID user123, skip confirmation\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 5
                },
                {
                    "prompt_response": {
                        "response": "```bash\npython main.py generate-report sales --output sales_report.csv\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 1680.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py generate-report sales --output sales_report.csv",
                    "expected_result": "python main.py generate-report sales --output sales_report.csv",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Generate a sales report in the file sales_report.csv\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 6
                }
            ],
            "correct_count": 6,
            "incorrect_count": 0,
            "accuracy": 1.0,
            "average_tokens_per_second": 0.0,
            "average_total_duration_ms": 1695.6666666666667,
            "average_load_duration_ms": 0.0
        }
    ],
    "overall_correct_count": 11,
    "overall_incorrect_count": 1,
    "overall_accuracy": 0.9166666666666666,
    "average_tokens_per_second": 0.0,
    "average_total_duration_ms": 1992.5833333333335,
    "average_load_duration_ms": 0.0
}